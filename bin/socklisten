#!/usr/bin/env python
'''
Like tcpserver(1) or unixserver(1), but exec the subordinate program
with the listen socket on stdin. The subordinate program should call
accept(2) on stdin.
'''

import sys
from os import unlink, chmod, dup2, close, execvp
from fcntl import fcntl, F_GETFD, F_SETFD, FD_CLOEXEC
from errno import ENOENT
from socket import socket, AF_INET, AF_UNIX, SOCK_STREAM

prog = sys.argv.pop(0)
usage = "usage: %s [-b backlog] [-m octal-mode] [-d fd] [host:port | path/to/socket] program" % prog
mode = 0o770
backlog = 128
fd = 0

while len(sys.argv):
  arg0 = sys.argv[0]
  if arg0 == '-m':
    sys.argv.pop(0)
    mode = int(sys.argv.pop(0),8)
  elif arg0 == '-b':
    sys.argv.pop(0)
    backlog = int(sys.argv.pop(0))
  elif arg0 == '-d':
    sys.argv.pop(0)
    fd = int(sys.argv.pop(0))
  elif arg0 == '--':
    sys.argv.pop(0)
    break
  elif arg0.startswith('-'):
    print >> sys.stderr, usage
    exit(1)
  else:
    break

if len(sys.argv) < 2:
  print >> sys.stderr, usage
  exit(1)

address = sys.argv.pop(0)

if address.find(':') >= 0 and address.find('/') < 0:
  # Looks like host:port and not like a path.
  host, port = address.split(':')
  port = int(port)
  s = socket(AF_INET, SOCK_STREAM)
  s.bind((host, port))
else:
  # Looks like a path.
  sockpath = address
  # Remove socket from previous run, if it exists.
  try:
    unlink(sockpath)
  except OSError as e:
    if e.errno != ENOENT:
      raise
  s = socket(AF_UNIX, SOCK_STREAM)
  s.bind(sockpath)
  chmod(sockpath, mode)

s.listen(backlog)
dup2(s.fileno(), fd)
close(s.fileno())
fd and fcntl(fd, F_SETFD, ~FD_CLOEXEC & fcntl(fd, F_GETFD))
execvp(sys.argv[0],sys.argv)
