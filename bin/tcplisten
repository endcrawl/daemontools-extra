#!/usr/bin/env python
'''
Like tcpserver(1), but just listen and exec the subordinate program
with the listening socket as stdin. The subordinate program still needs
to call accept(2) on stdin.
NB -- `tcplisten host:port` vs `tcpserver host port`.
'''

import sys
import os
import socket

prog = sys.argv.pop(0)
usage = "usage: %s [-b backlog] host:port program" % prog
backlog = 128

while len(sys.argv):
  arg0 = sys.argv[0]
  if arg0 == '-b':
    sys.argv.pop(0)
    backlog = int(sys.argv.pop(0))
  elif arg0 == '--':
    sys.argv.pop(0)
    break
  elif arg0.startswith('-'):
    print >> sys.stderr, usage
    exit(1)
  else:
    break

if len(sys.argv) < 2:
  print >> sys.stderr, usage
  exit(1)

hostport = sys.argv.pop(0)
host, port = hostport.split(':')
port = int(port)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host, port))
s.listen(backlog)
os.dup2(s.fileno(),0)
os.close(s.fileno())
os.execvp(sys.argv[0],sys.argv)

