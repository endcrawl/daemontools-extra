#!/usr/bin/env python3

from os import fork, execvp, kill, pipe, read, close, waitpid, getpid, set_blocking, set_inheritable, WNOHANG, WEXITSTATUS
from signal import signal, set_wakeup_fd, SIG_DFL, SIGQUIT, SIGHUP, SIGUSR1
from select import select
import optparse
import sys


signals = []
log_level = 0

def main( argv, stdin, stdout, stderr ):

  global signals, log_level

  def logging_option( option, opt_str, value, parser ):
    if option.get_opt_string() == '--verbose':
      parser.values.log_level += 1
    elif option.get_opt_string() == '--quiet':
      parser.values.log_level -= 1

  optp = optparse.OptionParser()
  optp.add_option( '-c', '--count', help="Keep N concurrent child processes around.", type='int', default=1, action='store' )
  optp.add_option( '-s', '--relay-signals', help="Relay certain signals to children. Currently just SIGHUP.", action='store_true' )
  optp.add_option( '-L', '--log-level', help="Set logging level.", type='int', default=0, action='store' )
  optp.add_option( '-v', '--verbose', help="Increase logging verbosity.", action='callback', callback=logging_option )
  optp.add_option( '-q', '--quiet', help="Decrease logging verbosity.", action='callback', callback=logging_option )
  opts, args = optp.parse_args( args=argv[1:] )

  log_level = opts.log_level

  signal( SIGQUIT, signal_handler )
  signal( SIGHUP, signal_handler )
  signal( SIGUSR1, signal_handler )

  signal_rfd, signal_wfd = pipe()
  set_blocking(signal_rfd, False), set_blocking(signal_wfd, False)
  set_inheritable(signal_rfd, False), set_inheritable(signal_wfd, False)
  set_wakeup_fd(signal_wfd)

  max_children = opts.count
  children = dict()  # key = child's pid, value = child's exit pipe fd

  while max_children or len(children):

    # Process and clear pending signals.

    if SIGQUIT in signals:
      log( 1, "got SIGQUIT, winding down" )
      max_children = 0

    if SIGHUP in signals:
      log( 1, "got SIGHUP, children should exit gracefully" )
      if opts.relay_signals:
        for pid in children.keys():
          kill( pid, SIGHUP )

    if SIGUSR1 in signals:
      pids = [ "%d" % pid for pid in children.keys() ]
      log( 2, "info: (%d/%d) children: %s" % (len(children),max_children,",".join(pids)) )

    signals[:] = []

    # Replenish children up to the limit.

    while len(children) < max_children:
      rfd, wfd = pipe()
      set_blocking(rfd, False), set_blocking(wfd, False)
      set_inheritable(rfd, False), set_inheritable(wfd, True)
      pid = fork()
      if pid:
        close(wfd)
        children[pid] = rfd
        log( 1, "child %d (%d/%d) started" % (pid,len(children),max_children) )
      else:
        execvp(args[0],args)

    # Wait for signals or exited children.

    rlist = [signal_rfd] + list(children.values())
    rlist, wlist, xlist = select(rlist, [], [], None)
    if signal_rfd in rlist:
      read(signal_rfd, 1024)

    # Reap children and report their status.

    statuses = reap(children)
    for pid, status in statuses.items():
      rc = WEXITSTATUS(status)
      log( 1, "child %d (%d/%d) exited %d" % (pid,len(children),max_children,rc) )

  reap(children)

  return 0


def reap( children ):
  statuses = dict()
  while len(children):
    pid, status = waitpid(-1, WNOHANG)
    if not pid:
      break
    statuses[pid] = status
    close(children[pid])
    del children[pid]
  return statuses


def signal_handler( signum, frame ):
  global signals
  signals.append(signum)


def log( level, msg ):
  global log_level
  if level > log_level: return
  prog = sys.argv[0].split('/')[-1]
  print("%s/%05d: {L%d} %s" % (prog,getpid(),level,msg), file=sys.stderr)


if __name__ == '__main__':
  exit( main(sys.argv,sys.stdin,sys.stdout,sys.stderr) )
