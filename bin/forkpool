#!/usr/bin/env python

import sys
import os
import signal
import errno
import optparse


signals = []
log_level = 0

def main( argv, stdin, stdout, stderr ):

  global signals, log_level

  def logging_option( option, opt_str, value, parser ):
    if option.get_opt_string() == '--verbose':
      parser.values.log_level += 1
    elif option.get_opt_string() == '--quiet':
      parser.values.log_level -= 1

  optp = optparse.OptionParser()
  optp.add_option( '-c', '--count', help="Keep N concurrent child processes around.", type='int', default=1, action='store' )
  optp.add_option( '-s', '--relay-signals', help="Relay certain signals to children. Currently just SIGHUP.", action='store_true' )
  optp.add_option( '-L', '--log-level', help="Set logging level.", type='int', default=0, action='store' )
  optp.add_option( '-v', '--verbose', help="Increase logging verbosity.", action='callback', callback=logging_option )
  optp.add_option( '-q', '--quiet', help="Decrease logging verbosity.", action='callback', callback=logging_option )
  opts, args = optp.parse_args( args=argv[1:] )

  log_level = opts.log_level

  signal.signal( signal.SIGQUIT, signal_handler )
  signal.signal( signal.SIGHUP, signal_handler )
  signal.signal( signal.SIGUSR1, signal_handler )

  max_children = opts.count
  children = {}

  while max_children or len(children):

    if signal.SIGQUIT in signals:
      log( 1, "got SIGQUIT, winding down" )
      max_children = 0

    if signal.SIGHUP in signals:
      log( 1, "got SIGHUP, children should exit gracefully" )
      if opts.relay_signals:
        for pid in children.keys():
          os.kill( pid, signal.SIGHUP )

    if signal.SIGUSR1 in signals:
      pids = [ "%d" % pid for pid in children.keys() ]
      log( 2, "info: (%d/%d) children: %s" % (len(children),max_children,",".join(pids)) )

    signals[:] = []

    # Replenish children up to the limit.
    while len(children) < max_children:
      pid = os.fork()
      if pid:
        children[pid] = {}
        log( 1, "child %d (%d/%d) started" % (pid,len(children),max_children) )
      else:
        os.execvp(args[0],args)

    # Try to reap one child.
    if len(children):
      # FIXME use childpipes here so we can reap *all* that have exited
      pid = None
      while pid == None:
        try:
          pid, status = os.wait()
        except OSError as e:
          if e.errno == errno.EINTR:
            break
          else:
            raise
      if pid != None:
        rc = os.WEXITSTATUS(status)
        log( 1, "child %d (%d/%d) exited %d" % (pid,len(children),max_children,rc) )
        del children[pid]


  while len(children):
    pid, status = os.waitpid(-1, os.WNOHANG)
    if not pid:
      break
    del children[pid]

  return 0


def signal_handler( signum, frame ):
  global signals
  signals.append(signum)


def log( level, msg ):
  global log_level
  if level > log_level: return
  prog = sys.argv[0].split('/')[-1]
  print("%s/%05d: {L%d} %s" % (prog,os.getpid(),level,msg), file=sys.stderr)


if __name__ == '__main__':
  exit( main(sys.argv,sys.stdin,sys.stdout,sys.stderr) )

